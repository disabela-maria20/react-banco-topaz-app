@use "sass:map";
// _mixins.scss

@use "./variables" as var;

@mixin media($breakpoint) {
  $breakpoint-value: map.get(var.$grid-breakpoints, $breakpoint);

  @if not $breakpoint-value {
    @error "Invalid breakpoint: #{$breakpoint}.";
  }

  @media (min-width: $breakpoint-value) {
    @content;
  }
}

@mixin container {
  width: 100%;
  margin: 0 auto;
  padding: 0 25px;

  @include media("sm") {
    max-width: calc(map.get(var.$grid-breakpoints, sm) - 10px);
  }

  @include media("md") {
    max-width: calc(map.get(var.$grid-breakpoints, md) - 10px);
  }

  @include media("lg") {
    max-width: calc(map.get(var.$grid-breakpoints, lg) - 10px);
  }

  @include media("xl") {
    max-width: calc(map.get(var.$grid-breakpoints, xl) - 10px);
  }

  @include media("xxl") {
    max-width: calc(map.get(var.$grid-breakpoints, xxl) - 10px);
  }
}

.container {
  @include container();
}

.grid {
  display: grid;
}

@for $i from 1 through 12 {
  $columns: 1 * $i;

  .grid-#{$i} {
    grid-template-columns: repeat(#{$i}, 1fr);
  }

  @each $breakpoint, $value in var.$grid-breakpoints {
    @include media($breakpoint) {
      .grid-#{$i}-#{$breakpoint} {
        grid-template-columns: repeat(#{$i}, 1fr);
      }
    }
  }
}

@each $size in var.$valor_gap {
  .gap-#{$size} {
    gap: #{$size}px;
  }

  @each $breakpoint, $value in var.$grid-breakpoints {
    @include media($breakpoint) {
      .gap-#{$size}-#{$breakpoint} {
        gap: #{$size}px;
      }
    }
  }
}


